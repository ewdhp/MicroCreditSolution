#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using MicroCredit.Controllers;
using MicroCredit.Data;
using MicroCredit.Models;

namespace MicroCredit.Tests.Controllers
{
    [TestClass]
    public class UserControllerTests
    {
        private Mock<ApplicationDbContext> _mockContext;
        private UserController _controller;

        [TestInitialize]
        public void Setup()
        {
            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseInMemoryDatabase(databaseName: "TestDatabase")
                .Options;

            _mockContext = new Mock<ApplicationDbContext>(options);
            _controller = new UserController(_mockContext.Object);
        }

        [TestMethod]
        public async Task GetUser_ReturnsUnauthorized_WhenUserIdIsNull()
        {
            // Arrange
            var user = new ClaimsPrincipal(new ClaimsIdentity(new Claim[]
            {
                // No UserId claim
            }, "mock"));

            _controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext { User = user }
            };

            // Act
            var result = await _controller.GetUser(Guid.NewGuid());

            // Assert
            Assert.IsInstanceOfType(result.Result, typeof(UnauthorizedResult));
        }

        [TestMethod]
        public async Task GetUser_ReturnsNotFound_WhenUserNotFound()
        {
            // Arrange
            var userId = Guid.NewGuid().ToString();
            var user = new ClaimsPrincipal(new ClaimsIdentity(new Claim[]
            {
                new Claim("UserId", userId)
            }, "mock"));

            _controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext { User = user }
            };

            // Act
            var result = await _controller.GetUser(Guid.NewGuid());

            // Assert
            Assert.IsInstanceOfType(result.Result, typeof(NotFoundObjectResult));
        }

        [TestMethod]
        public async Task GetUser_ReturnsOk_WhenUserFound()
        {
            // Arrange
            var userId = Guid.NewGuid();
            var user = new ClaimsPrincipal(new ClaimsIdentity(new Claim[]
            {
                new Claim("UserId", userId.ToString())
            }, "mock"));

            _controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext { User = user }
            };

            var users = new List<User>
            {
                new User { Id = userId, Phone = "1234567890" }
            };

            _mockContext.Setup(c => c.Users).ReturnsDbSet(users);

            // Act
            var result = await _controller.GetUser(userId);

            // Assert
            var okResult = Assert.IsInstanceOfType(result.Result, typeof(OkObjectResult));
            var returnValue = (okResult as OkObjectResult).Value as User;
            Assert.IsNotNull(returnValue);
            Assert.AreEqual(userId, returnValue.Id);
        }

        [TestMethod]
        public async Task CreateUser_ReturnsConflict_WhenPhoneNumberExists()
        {
            // Arrange
            var existingUser = new User { Id = Guid.NewGuid(), Phone = "1234567890" };
            var users = new List<User> { existingUser };

            _mockContext.Setup(c => c.Users).ReturnsDbSet(users);

            var newUser = new User { Phone = "1234567890" };

            // Act
            var result = await _controller.CreateUser(newUser);

            // Assert
            Assert.IsInstanceOfType(result.Result, typeof(ConflictObjectResult));
        }

        [TestMethod]
        public async Task CreateUser_ReturnsCreatedAtAction_WhenUserCreated()
        {
            // Arrange
            var newUser = new User { Id = Guid.NewGuid(), Phone = "0987654321" };

            _mockContext.Setup(c => c.Users).ReturnsDbSet(new List<User>());

            // Act
            var result = await _controller.CreateUser(newUser);

            // Assert
            var createdAtActionResult = Assert.IsInstanceOfType(result.Result, typeof(CreatedAtActionResult));
            var returnValue = (createdAtActionResult as CreatedAtActionResult).Value as User;
            Assert.IsNotNull(returnValue);
            Assert.AreEqual(newUser.Id, returnValue.Id);
        }
    }

    public static class DbSetMockingExtensions
    {
        public static DbSet<T> ReturnsDbSet<T>(this Mock<DbSet<T>> mockSet, IEnumerable<T> data) where T : class
        {
            var queryable = data.AsQueryable();
            mockSet.As<IQueryable<T>>().Setup(m => m.Provider).Returns(queryable.Provider);
            mockSet.As<IQueryable<T>>().Setup(m => m.Expression).Returns(queryable.Expression);
            mockSet.As<IQueryable<T>>().Setup(m => m.ElementType).Returns(queryable.ElementType);
            mockSet.As<IQueryable<T>>().Setup(m => m.GetEnumerator()).Returns(queryable.GetEnumerator());
            return mockSet.Object;
        }
    }
}
